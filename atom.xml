<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AugustJo&#39;s bloc</title>
  
  <subtitle>welcome to my bloc</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-06T09:24:30.658Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>AugustJo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在github搭建个人网站</title>
    <link href="http://yoursite.com/2018/04/23/%E5%9C%A8github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"/>
    <id>http://yoursite.com/2018/04/23/在github搭建个人网站/</id>
    <published>2018-04-23T13:56:37.910Z</published>
    <updated>2018-01-06T09:24:30.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>Hexo<br>&emsp;&emsp;Hexo 是一款基于Node.js、快速、简洁且高效的博客框架。Hexo 使用<a href="https://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">【Markdown】</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">【Hexo官网】</a></li></ul><ul><li><p>NodeJs<br>&emsp;&emsp;Nodejs框架是基于V8的引擎，是目前速度最快的Javascript引擎。chrome浏览器就基于V8，同时打开20-30个网页都很流畅。Nodejs标准的web开发框架Express，可以帮助我们迅速建立web站点，比起PHP的开发效率更高，而且学习曲线更低。非常适合小型网站，个性化网站，我们自己的Geek网站！</p></li><li><p>Git<br>&emsp;&emsp;是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。个人推荐的<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" target="_blank" rel="noopener">【Git教程】</a>适合新人快速上手。</p></li><li><p>GitHub<br>&emsp;&emsp;GitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名GitHub。</p></li><li><p>Github page<br>&emsp;&emsp;GitHub Pages本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。github Pages可以被认为是用户编写的、托管在github上的静态网页。</p></li><li><p>Markdown<br>&emsp;&emsp;Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。[1]这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。<br>&emsp;&emsp;优点：<br>&emsp;&emsp;1. 简单，容易上手<br>&emsp;&emsp;2. 纯文本实现，容易扩展，方便和其他工具联动<br>&emsp;&emsp;3. 平台支持广：以Github为首的各种平台、各种博客都支持，基本上现在面向程序员的输入框都可以用Markdown来写了<br>&emsp;&emsp;4. 丰富的工具链<br>&emsp;&emsp;5. 编辑器：支持各种所见即所得的编辑器<br>&emsp;&emsp;6. 和各种其他格式相互转换的工具。PDF、Mobi、Epub、HTML等等，几乎你能想到的所有格式它都能转换。  </p></li></ul><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>&emsp;&emsp;<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000/" target="_blank" rel="noopener">【Git安装教程】</a>根据自己的系统选择对应教程安装。<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232614085-1131765715.png" alt=""><br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232614804-834625382.png" alt="">一直下一步，然后自定义一个安装路径，安装即可。</p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><ol><li>打开<a href="https://nodejs.org/en/?spm=5176.100239.blogcont117271.14.9S7rO0" target="_blank" rel="noopener">【官网下载链接】</a>。我下载的是红框中这个版本。<br><img src="https://i.imgur.com/6ZPwefj.png" alt=""></li><li>安装，也是一直下一步，选择一个自定义的安装路径：<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232617898-768110250.png" alt=""></li><li>接着要配置环境变量：<br>&emsp;&emsp;环境变量配置为自己安装NodeJS的目录，配环境变量是为了让windows的命令行能调用到NodeJS里面的命令。<br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232619179-1359846250.png" alt=""><br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232620460-1237109258.png" alt=""><br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232621273-1242527090.png" alt=""><br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232621835-224445879.png" alt="">  </li></ol><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><ol><li>打开cmd并进入NodeJS的安装目录如下图所示<br><font color="red" face="微软雅黑"><strong>(注意：Windows系统下cmd要以管理员权限启动)</strong></font><br><img src="http://images2015.cnblogs.com/blog/603812/201604/603812-20160423232624491-800852353.png" alt="">  </li><li>用nmp命令安装hexo，继续在cmd当前目录下执行如下命令行，然后等待安装完成，如果第一次安装失败长时间卡在一个地方没有进展，可以关掉cmd重新重复步骤1,2<br><font color="red"><strong>(注意：请确保电脑中已经安装了<a href="https://nodejs.org/en/" target="_blank" rel="noopener">【NodeJS】</a>和<a href="https://git-scm.com/" target="_blank" rel="noopener">【Git】</a>)</strong></font><br><code>$ npm install -g hexo-cli</code>  </li><li>继续在cmd窗口执行如下命令行，创建一个博客目录并转到此目录下，目录名字自己随意取，此时最好将此目录备份到云盘或者其他地方，以防文件夹丢失后博客丢失<br><code>$ mkdir blog &amp;&amp; cd blog</code></li><li>继续在cmd窗口执行如下命令行，初始化博客文件夹<br><code>$ hexo init</code></li><li>安装hexo的扩展插件<br><code>$ npm install</code></li></ol><h1 id="初探hexo"><a href="#初探hexo" class="headerlink" title="初探hexo"></a>初探hexo</h1><ul><li><p>第一次使用hexo，在本地创建服务器使用  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 生成静态页面</span><br><span class="line">$ hexo generate</span><br><span class="line"># 开启本地服务器</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></li><li><p>打开浏览器，地址栏中输入：<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>应该可以看见刚刚创建的博客了</p></li><li><strong>问题：</strong>为什么访问<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，无反应？<br><strong>解决方法：</strong>可能是由于端口问题引起的。使用Ctrl+C中断本地服务，使用命令<code>hexo s -p 5000</code>重新开启本地服务，访问<a href="http://localhost:5000/" target="_blank" rel="noopener">http://localhost:5000/</a>可以看到博客页面了。</li></ul><h1 id="部署博客到github-注意：暂时不要关闭cmd窗口"><a href="#部署博客到github-注意：暂时不要关闭cmd窗口" class="headerlink" title="部署博客到github (注意：暂时不要关闭cmd窗口)"></a>部署博客到github <font color="red">(注意：暂时不要关闭cmd窗口)</font></h1><h3 id="1-注册帐号并创建一个仓库【参考教程】"><a href="#1-注册帐号并创建一个仓库【参考教程】" class="headerlink" title="1. 注册帐号并创建一个仓库【参考教程】"></a>1. 注册帐号并创建一个仓库<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013752340242354807e192f02a44359908df8a5643103a000" target="_blank" rel="noopener">【参考教程】</a></h3><p><font color="red">(注：Github Pages的Repository名字是特定的，比如我Github账号是augustjo，那么我Github Pages Repository名字就是augustjo.github.io下图是为了说明情况，因为我的账户已有同名仓库所以提示重名)</font><br><img src="https://i.imgur.com/eVyX1B7.png" alt=""></p><h3 id="2-设置github-pages"><a href="#2-设置github-pages" class="headerlink" title="2. 设置github pages"></a>2. 设置github pages</h3><ul><li>创建成功后，回到主页面，点击进入你刚刚创建好的仓库<br><img src="https://i.imgur.com/3onJ5rC.png" alt="">  </li><li>点击settings，进入仓库管理<br><img src="https://i.imgur.com/ARGr435.png" alt=""></li><li>填写网站连接，并选择一个主题(注：这里的主题是github pages自带的一些主题，后面可以用hexo下的开源主题替换掉)<br><img src="https://i.imgur.com/gDH06Vw.png" alt=""><br><img src="https://i.imgur.com/jE3aa7l.png" alt="">  </li><li><p>至此，你的github pages就发布成功了。试试在浏览器的地址栏输入<code>你github的用户名.github.io</code>将会看到自己网站的第一版界面！  </p></li><li><p>回到github仓库页面，复制仓库地址<br><img src="https://i.imgur.com/rah3Lkl.png" alt=""></p></li><li>打开你安装好的NodeJS的根目录，然后点击进入刚刚新建的blog文件夹<br><img src="https://i.imgur.com/Zt90hAs.png" alt=""></li><li>在文件的底部，将配置改成下图所示：<br>其中只需修改一下repository，将其内容修改为刚刚新建的项目的仓库地址即可<br><img src="https://i.imgur.com/S5ZOPcc.png" alt=""></li><li><p>接下来，回到你的cmd窗口，只需执行两个命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 解决hexo新版本的部署问题  </span><br><span class="line">$ npm install hexo-deployer-git --save  </span><br><span class="line"># 重新生成blog  </span><br><span class="line">$ hexo g  </span><br><span class="line"># 将本地blog部署到github的仓库  </span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></li><li><p>在浏览器的地址栏输入：“你的用户名.github.io”，此时，你应该会看到这样的界面：(这是一个自带的主题后面介绍如何修改主题，此时，cmd窗口暂时不要关)<br><img src="https://images2015.cnblogs.com/blog/603812/201604/603812-20160423232637101-1279946777.png" alt=""></p></li></ul><h1 id="博客主题设置"><a href="#博客主题设置" class="headerlink" title="博客主题设置"></a>博客主题设置</h1><h3 id="1-点击-【主题链接】进入主题列表-可预览-，选择一个主题点击该主题左边对应的github链接-查看readme按照教程安装。"><a href="#1-点击-【主题链接】进入主题列表-可预览-，选择一个主题点击该主题左边对应的github链接-查看readme按照教程安装。" class="headerlink" title="1. 点击 【主题链接】进入主题列表(可预览)，选择一个主题点击该主题左边对应的github链接,查看readme按照教程安装。"></a>1. 点击 <a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">【主题链接】</a>进入主题列表(可预览)，选择一个主题点击该主题左边对应的github链接,查看readme按照教程安装。</h3><p><img src="https://i.imgur.com/nSyzr0z.png" alt=""><br><img src="https://i.imgur.com/w7IX9ij.png" alt=""></p><h3 id="2-克隆主题到本地博客的themes目录下，在本地博客的themes目录下，右击鼠标选择启动Git-Bash"><a href="#2-克隆主题到本地博客的themes目录下，在本地博客的themes目录下，右击鼠标选择启动Git-Bash" class="headerlink" title="2. 克隆主题到本地博客的themes目录下，在本地博客的themes目录下，右击鼠标选择启动Git Bash"></a>2. 克隆主题到本地博客的themes目录下，在本地博客的themes目录下，右击鼠标选择启动<code>Git Bash</code></h3><p><img src="https://i.imgur.com/9L31xL6.png" alt=""></p><h3 id="3-在Git-Bash下克隆主题代码到本地目录，执行如下命令-将克隆的主题文件夹更改名字如下图"><a href="#3-在Git-Bash下克隆主题代码到本地目录，执行如下命令-将克隆的主题文件夹更改名字如下图" class="headerlink" title="3. 在Git Bash下克隆主题代码到本地目录，执行如下命令,将克隆的主题文件夹更改名字如下图"></a>3. 在<code>Git Bash</code>下克隆主题代码到本地目录，执行如下命令,将克隆的主题文件夹更改名字如下图</h3><p><code>$ git clone git://github.com/ppoffice/hexo-theme-alex.git</code><br><img src="https://images2015.cnblogs.com/blog/603812/201604/603812-20160423232642273-923149866.png" alt="">  </p><h3 id="4-配置博客主题为刚克隆的主题"><a href="#4-配置博客主题为刚克隆的主题" class="headerlink" title="4. 配置博客主题为刚克隆的主题"></a>4. 配置博客主题为刚克隆的主题</h3><p>进入到/blog/_config.yml里面，将theme改为你刚刚下载保存的主题的名字<br><img src="https://images2015.cnblogs.com/blog/603812/201604/603812-20160423232645241-1628496699.png" alt=""></p><h3 id="5-回到cmd，执行"><a href="#5-回到cmd，执行" class="headerlink" title="5. 回到cmd，执行:"></a>5. 回到cmd，执行:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 重新生成blog  </span><br><span class="line">$ hexo g  </span><br><span class="line"># 将本地blog部署到github的仓库  </span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h1 id="编辑与发布博客"><a href="#编辑与发布博客" class="headerlink" title="编辑与发布博客"></a>编辑与发布博客</h1><ul><li>文件路径<code>...blog/source/_post</code>下存放的是markdown文件，是个人编辑好的博客文件。<br><img src="https://images2015.cnblogs.com/blog/603812/201604/603812-20160423232647101-1316912184.png" alt=""></li><li>发布博客，在cmd窗口转到博客所在目录，执行如下命令行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 重新生成blog  </span><br><span class="line">$ hexo g  </span><br><span class="line"># 将本地blog部署到github的仓库  </span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></li></ul><h1 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h1><p><a href="https://www.cnblogs.com/dantefung/p/d8c48ba8030bcab7cfc364d423186fee.html" target="_blank" rel="noopener">https://www.cnblogs.com/dantefung/p/d8c48ba8030bcab7cfc364d423186fee.html</a><br><a href="http://blog.fens.me/hexo-blog-github/" target="_blank" rel="noopener">http://blog.fens.me/hexo-blog-github</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Hexo&lt;br&gt;&amp;emsp;&amp;emsp;Hexo 是一款基于Node.js、快速、简洁且高效的博客框架。Hexo 使用&lt;a hr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SSH远程连接虚拟机(Ubuntu)</title>
    <link href="http://yoursite.com/2018/04/23/SSH%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E8%BF%90%E8%A1%8C%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <id>http://yoursite.com/2018/04/23/SSH远程访问服务器上运行的虚拟机/</id>
    <published>2018-04-23T13:56:37.903Z</published>
    <updated>2017-12-15T09:05:44.256Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验平台："><a href="#实验平台：" class="headerlink" title="实验平台："></a>实验平台：</h2><p>实验室服务器(Windows Server 2008)，安装虚拟机VMware(Ubuntu 14.04)。<br>个人PC(Win10)。客户端软件：MobeXterm(或者Putty)，这两个软件都是免安装解压缩后直接使用的，MobaXterm使用Personal个人版是免费的。</p><h2 id="配置步骤："><a href="#配置步骤：" class="headerlink" title="配置步骤："></a>配置步骤：</h2><p>参考<a href="http://www.linuxidc.com/Linux/2014-04/99728.htm" target="_blank" rel="noopener">SSH连接虚拟机中的Ubuntu 12.0.4</a></p><h3 id="1-在虚拟机-Ubuntu-上安装ssh的服务器端"><a href="#1-在虚拟机-Ubuntu-上安装ssh的服务器端" class="headerlink" title="1.在虚拟机(Ubuntu)上安装ssh的服务器端"></a>1.在虚拟机(Ubuntu)上安装ssh的服务器端</h3><h4 id="a-查看是否安装ssh服务"><a href="#a-查看是否安装ssh服务" class="headerlink" title="(a)查看是否安装ssh服务:"></a>(a)查看是否安装ssh服务:<br></h4><p>在ubuntu终端命令界面键入：<br><br> <code>ssh localhost</code> <br></p><p>如果出现下面提示则表示还没有安装：<br> <code>ssh: connect to hostlocalhost port 22: Connection refused</code></p><h4 id="b-安装ssh服务"><a href="#b-安装ssh服务" class="headerlink" title="(b)安装ssh服务:"></a>(b)安装ssh服务:<br></h4><p>如果通过上面步骤查看没有安装<code>sshserver</code>、则键入如下命令安装：<br> <code>sudo apt-getinstall –y openssh-server</code></p><h4 id="c-安装完成后启动ssh"><a href="#c-安装完成后启动ssh" class="headerlink" title="(c)安装完成后启动ssh:"></a>(c)安装完成后启动ssh:<br></h4><p> <code>sudo service ssh start</code></p><h4 id="d-启动完成之后可以使用命令：ps-–e-grep-ssh-来查看ssh状态"><a href="#d-启动完成之后可以使用命令：ps-–e-grep-ssh-来查看ssh状态" class="headerlink" title="(d)启动完成之后可以使用命令：ps –e | grep ssh 来查看ssh状态"></a>(d)启动完成之后可以使用命令：<code>ps –e | grep ssh</code> 来查看ssh状态</h4><p> <code>4057 ?        00:00:00 sshd</code></p><p>表明启动成功。如果只有ssh-agent那ssh-server还没有启动，需要<code>sudo /etc/init.d/ssh start</code>，如果看到<code>sshd</code>那说明<code>ssh-server</code>已经启动了。</p><h4 id="e-使用嵌入式自带编辑器gedit修改配置文件-etc-ssh-sshd-config"><a href="#e-使用嵌入式自带编辑器gedit修改配置文件-etc-ssh-sshd-config" class="headerlink" title="(e)使用嵌入式自带编辑器gedit修改配置文件/etc/ssh/sshd_config"></a>(e)使用嵌入式自带编辑器<code>gedit</code>修改配置文件<code>/etc/ssh/sshd_config</code></h4><p><code>sudo gedit /etc/ssh/sshd_config</code></p><p>编辑完如下图，编辑完后保存，关闭编辑器。(修改此行目的是从远程界面登录的时候可以进入root模式)<br><img src="https://i.imgur.com/4u4jHlV.png" alt=""></p><h4 id="f-查看Ubuntu的IP地址：-eth0的inet"><a href="#f-查看Ubuntu的IP地址：-eth0的inet" class="headerlink" title="(f)查看Ubuntu的IP地址：(eth0的inet)"></a>(f)查看Ubuntu的IP地址：(eth0的inet)</h4><p> <code>sudo ifconfig</code></p><p><img src="https://i.imgur.com/58GH6lW.png" alt=""></p><h3 id="2-设置虚拟机网络适配器-此步仅用于虚拟机，如果服务器上运行的是ubuntu系统自行忽略-参考VMware-NAT做端口映射"><a href="#2-设置虚拟机网络适配器-此步仅用于虚拟机，如果服务器上运行的是ubuntu系统自行忽略-参考VMware-NAT做端口映射" class="headerlink" title="2.设置虚拟机网络适配器(此步仅用于虚拟机，如果服务器上运行的是ubuntu系统自行忽略)参考VMware NAT做端口映射"></a>2.设置虚拟机网络适配器(此步仅用于虚拟机，如果服务器上运行的是ubuntu系统自行忽略)参考<a href="https://jingyan.baidu.com/article/c35dbcb0d1ff248916fcbc0d.html" target="_blank" rel="noopener">VMware NAT做端口映射</a></h3><h4 id="a-VMware【编辑】菜单下选择【虚拟网络编辑器】如图"><a href="#a-VMware【编辑】菜单下选择【虚拟网络编辑器】如图" class="headerlink" title="(a)VMware【编辑】菜单下选择【虚拟网络编辑器】如图"></a>(a)VMware【编辑】菜单下选择【虚拟网络编辑器】如图</h4><p><img src="https://i.imgur.com/XDrpI1t.png" alt=""></p><h4 id="b-选择NAT，然后点击NAT设置，如图"><a href="#b-选择NAT，然后点击NAT设置，如图" class="headerlink" title="(b)选择NAT，然后点击NAT设置，如图"></a>(b)选择<code>NAT</code>，然后点击<code>NAT设置</code>，如图</h4><p><img src="https://i.imgur.com/StgtJMk.png" alt=""></p><h4 id="c-添加端口转发：-虚拟机的网络是通过NAT与主机共享，要想通过外网访问虚拟机需要使用宿主机端口，这时选择的端口号要是宿主机未被占用的端口"><a href="#c-添加端口转发：-虚拟机的网络是通过NAT与主机共享，要想通过外网访问虚拟机需要使用宿主机端口，这时选择的端口号要是宿主机未被占用的端口" class="headerlink" title="(c)添加端口转发：(虚拟机的网络是通过NAT与主机共享，要想通过外网访问虚拟机需要使用宿主机端口，这时选择的端口号要是宿主机未被占用的端口)"></a>(c)添加端口转发：(虚拟机的网络是通过NAT与主机共享，要想通过外网访问虚拟机需要使用宿主机端口，这时选择的端口号要是宿主机未被占用的端口)</h4><p><img src="https://i.imgur.com/Q3sLJCH.png" alt=""></p><h4 id="d-在Windows防火墙开放此端口：win7系统如何在防火墙里开放端口"><a href="#d-在Windows防火墙开放此端口：win7系统如何在防火墙里开放端口" class="headerlink" title="(d)在Windows防火墙开放此端口：win7系统如何在防火墙里开放端口"></a>(d)在Windows防火墙开放此端口：<a href="https://jingyan.baidu.com/article/f96699bbadafca894f3c1b7a.html" target="_blank" rel="noopener">win7系统如何在防火墙里开放端口</a></h4><h3 id="3-ping网络"><a href="#3-ping网络" class="headerlink" title="3.ping网络"></a>3.ping网络</h3><h4 id="a-远端电脑，cmd打开命令窗口，键入：ipconfig-命令、查看主机IP。（实验室这台服务器不在实验室局域网内"><a href="#a-远端电脑，cmd打开命令窗口，键入：ipconfig-命令、查看主机IP。（实验室这台服务器不在实验室局域网内" class="headerlink" title="(a)远端电脑，cmd打开命令窗口，键入：ipconfig 命令、查看主机IP。（实验室这台服务器不在实验室局域网内)"></a>(a)远端电脑，<code>cmd</code>打开命令窗口，键入：<code>ipconfig</code> 命令、查看主机IP。（实验室这台服务器不在实验室局域网内)</h4><p><img src="https://i.imgur.com/9NVHEXa.png" alt=""></p><h4 id="b-服务器IP-外网和局域网-："><a href="#b-服务器IP-外网和局域网-：" class="headerlink" title="(b)服务器IP(外网和局域网)："></a>(b)服务器IP(外网和局域网)：</h4><p><img src="https://i.imgur.com/TxzF3em.png" alt=""></p><h4 id="c-通过远端电脑ping服务器的外网IP："><a href="#c-通过远端电脑ping服务器的外网IP：" class="headerlink" title="(c)通过远端电脑ping服务器的外网IP："></a>(c)通过远端电脑ping服务器的外网IP：</h4><p><img src="https://i.imgur.com/CeuijzC.png" alt=""></p><h4 id="d-服务器（Windows）ping虚拟机（Ubuntu）"><a href="#d-服务器（Windows）ping虚拟机（Ubuntu）" class="headerlink" title="(d)服务器（Windows）ping虚拟机（Ubuntu）"></a>(d)服务器（Windows）ping虚拟机（Ubuntu）</h4><p><img src="https://i.imgur.com/q8gWklX.png" alt=""></p><h3 id="4-MobaXterm连接远程linux"><a href="#4-MobaXterm连接远程linux" class="headerlink" title="4.MobaXterm连接远程linux:"></a>4.MobaXterm连接远程linux:</h3><p><a href="http://www.bubuko.com/infodetail-381983.html" target="_blank" rel="noopener">查看教程1</a><br><br><a href="http://blog.chinaunix.net/uid-31404814-id-5757246.html" target="_blank" rel="noopener">查看教程2</a></p><h4 id="a-打开MobaXterm-Personal-9-4-exe选择Session创建一个和我的ubuntu服务器连接的终端"><a href="#a-打开MobaXterm-Personal-9-4-exe选择Session创建一个和我的ubuntu服务器连接的终端" class="headerlink" title="(a)打开MobaXterm_Personal_9.4.exe选择Session创建一个和我的ubuntu服务器连接的终端."></a>(a)打开MobaXterm_Personal_9.4.exe选择Session创建一个和我的ubuntu服务器连接的终端.</h4><p><img src="https://i.imgur.com/ARtbySM.png" alt=""></p><h4 id="b-选择协议为SSH，下面输入IP（这里我输入的是服务器外网IP，如果是Linux的服务器需要写的就是Linux的外网IP，待会儿告诉你怎么查。。），用户名称（随便写），端口号（对应的虚拟机的端口号）。再下面选项是配置显示界面的状态可根据自己的需要做相应调整。"><a href="#b-选择协议为SSH，下面输入IP（这里我输入的是服务器外网IP，如果是Linux的服务器需要写的就是Linux的外网IP，待会儿告诉你怎么查。。），用户名称（随便写），端口号（对应的虚拟机的端口号）。再下面选项是配置显示界面的状态可根据自己的需要做相应调整。" class="headerlink" title="(b)选择协议为SSH，下面输入IP（这里我输入的是服务器外网IP，如果是Linux的服务器需要写的就是Linux的外网IP，待会儿告诉你怎么查。。），用户名称（随便写），端口号（对应的虚拟机的端口号）。再下面选项是配置显示界面的状态可根据自己的需要做相应调整。"></a>(b)选择协议为SSH，下面输入IP（这里我输入的是服务器外网IP，如果是Linux的服务器需要写的就是Linux的外网IP，待会儿告诉你怎么查。。），用户名称（随便写），端口号（对应的虚拟机的端口号）。再下面选项是配置显示界面的状态可根据自己的需要做相应调整。</h4><p><img src="https://i.imgur.com/8ALjNr4.png" alt=""></p><h4 id="c-配置完成，选择ok，下图红框中就是新建的一个终端双击启动。输入密码登陆。MobaXterm比Putty更加方便，可以直接读取linux的文件系统并且可以实现本地文件拖拽上传。"><a href="#c-配置完成，选择ok，下图红框中就是新建的一个终端双击启动。输入密码登陆。MobaXterm比Putty更加方便，可以直接读取linux的文件系统并且可以实现本地文件拖拽上传。" class="headerlink" title="(c)配置完成，选择ok，下图红框中就是新建的一个终端双击启动。输入密码登陆。MobaXterm比Putty更加方便，可以直接读取linux的文件系统并且可以实现本地文件拖拽上传。"></a>(c)配置完成，选择ok，下图红框中就是新建的一个终端双击启动。输入密码登陆。MobaXterm比Putty更加方便，可以直接读取linux的文件系统并且可以实现本地文件拖拽上传。</h4><p><img src="https://i.imgur.com/yqYi1zR.png" alt=""><br><img src="https://i.imgur.com/9Ov4xWp.png" alt=""><br><img src="https://i.imgur.com/hIpU8pn.png" alt=""><br><br><br><br><br><strong>注：查看虚拟机的外网IP<br><br>     安装使用curl命令实现：<code>sudo apt-get install curl</code><br><br>    输入命令：<code>curl ifconfig.me</code></strong></p><p><img src="https://i.imgur.com/NXisUBa.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实验平台：&quot;&gt;&lt;a href=&quot;#实验平台：&quot; class=&quot;headerlink&quot; title=&quot;实验平台：&quot;&gt;&lt;/a&gt;实验平台：&lt;/h2&gt;&lt;p&gt;实验室服务器(Windows Server 2008)，安装虚拟机VMware(Ubuntu 14.04)。&lt;br&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Welcome to MarkdownPad 2</title>
    <link href="http://yoursite.com/2018/04/23/MarkdownPad2/"/>
    <id>http://yoursite.com/2018/04/23/MarkdownPad2/</id>
    <published>2018-04-23T13:56:37.898Z</published>
    <updated>2017-12-15T09:09:26.336Z</updated>
    
    <content type="html"><![CDATA[<p><strong>MarkdownPad</strong> is a full-featured Markdown editor for Windows.</p><h3 id="Built-exclusively-for-Markdown"><a href="#Built-exclusively-for-Markdown" class="headerlink" title="Built exclusively for Markdown"></a>Built exclusively for Markdown</h3><p>Enjoy first-class Markdown support with easy access to  Markdown syntax and convenient keyboard shortcuts.</p><p>Give them a try:</p><ul><li><strong>Bold</strong> (<code>Ctrl+B</code>) and <em>Italic</em> (<code>Ctrl+I</code>)</li><li>Quotes (<code>Ctrl+Q</code>)</li><li>Code blocks (<code>Ctrl+K</code>)</li><li>Headings 1, 2, 3 (<code>Ctrl+1</code>, <code>Ctrl+2</code>, <code>Ctrl+3</code>)</li><li>Lists (<code>Ctrl+U</code> and <code>Ctrl+Shift+O</code>)</li></ul><h3 id="See-your-changes-instantly-with-LivePreview"><a href="#See-your-changes-instantly-with-LivePreview" class="headerlink" title="See your changes instantly with LivePreview"></a>See your changes instantly with LivePreview</h3><p>Don’t guess if your <a href="http://markdownpad.com" target="_blank" rel="noopener">hyperlink syntax</a> is correct; LivePreview will show you exactly what your document looks like every time you press a key.</p><h3 id="Make-it-your-own"><a href="#Make-it-your-own" class="headerlink" title="Make it your own"></a>Make it your own</h3><p>Fonts, color schemes, layouts and stylesheets are all 100% customizable so you can turn MarkdownPad into your perfect editor.</p><h3 id="A-robust-editor-for-advanced-Markdown-users"><a href="#A-robust-editor-for-advanced-Markdown-users" class="headerlink" title="A robust editor for advanced Markdown users"></a>A robust editor for advanced Markdown users</h3><p>MarkdownPad supports multiple Markdown processing engines, including standard Markdown, Markdown Extra (with Table support) and GitHub Flavored Markdown.</p><p>With a tabbed document interface, PDF export, a built-in image uploader, session management, spell check, auto-save, syntax highlighting and a built-in CSS management interface, there’s no limit to what you can do with MarkdownPad.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;MarkdownPad&lt;/strong&gt; is a full-featured Markdown editor for Windows.&lt;/p&gt;
&lt;h3 id=&quot;Built-exclusively-for-Markdown&quot;&gt;&lt;a href=&quot;#Built-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/04/23/hello-world/"/>
    <id>http://yoursite.com/2018/04/23/hello-world/</id>
    <published>2018-04-23T13:56:37.892Z</published>
    <updated>2017-12-05T13:18:12.871Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
